<!DOCTYPE HTML>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<title>CERA Mobile</title>
		<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.7/jquery.min.js"></script>
		<link rel="stylesheet" href="http://code.jquery.com/mobile/1.3.0/jquery.mobile-1.3.0.min.css" />
		<link rel="stylesheet" href="controls.css" />
		<script src="http://code.jquery.com/jquery-1.8.2.min.js"></script>
		<script src="http://code.jquery.com/mobile/1.3.0/jquery.mobile-1.3.0.min.js"></script>
		<script src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=true"></script>
		<script>
			//var platform = navigator.userAgent;
		   	//if(platform.indexOf("Android") == -1 && platform.indexOf("Mobile") == -1 && platform.indexOf("Windows Phone") == -1 && platform.indexOf("Blackberry") == -1)
		  		//window.location = "http://cera.cct.lsu.edu/cgi-cera-ng/cera-ng.cgi";
		  		
		  window.addEventListener('orientationchange', doOnOrientationChange);
		  function doOnOrientationChange(){
		    if((window.orientation==-90)||(window.orientation==90))//portrait
		    {  
		  		$("#map").css({width: '90%', height: window.screen.width * .7 + ""});
		    }
		    else//landscape
		    {
		  		$("#map").css({width: '70%', height: window.screen.height * .7 + ""});
		    }
		  }
		  	
		  	var json; //json file
			var map;
			var layerList = [];
		   	var hurricaneList = [];
			var JSONURL = getLatestJSONURL(); 
			var wms_url = "cera.cct.lsu.edu/cera_data/ceracgi/cera_wms_tiled?day=20120826&time=0000&com=490&griddomain=CPRA&tz=cdt&";
		  	
		  function refresh()
		  {
		  	var layerIndex = $('#layers div.button-selected').index();
		  	var hurricaneIndex = $('#hurricanes div.button-selected').index();
		  	
			var tempDeferred = 
				$.getJSON(JSONURL, function(data) {
			  		json = data;
			  			
		  			var layerHTML = [];
					var count = 0;
					layerList = [];
					
					$.each(json.layers, function(layer, value) {
						if(value && (layer.indexOf('max') != -1)) // if the layer option is true (available)
						{
							layerHTML.push('<div class=\'dropdown-item\' onclick="jumpLayer(' + count + ')">' + layer + '</div>');
							layerList.push(layer);
							count++;
						}
					});
					$('#layers').html(layerHTML.join(''));
					
					var hurricaneHTML = [];
					hurricaneList = [];
					count = 0;
					//year -> data -> text,value,year
					$.each(json.years, function()
					{
						$.each(this.data, function()
						{
							hurricaneList.push(this);
							hurricaneHTML.push('<div class=\'dropdown-item\' onclick="jumpHurricane(' + count + ')">' + this.text + '</div>');
							count++;
						})
					})
					$('#hurricanes').html(hurricaneHTML.join(''));		
					
					if(hurricaneIndex != -1)
						$('#hurricanes').find('div:eq('+ hurricaneIndex + ')').addClass("button-selected");
					
					if(layerIndex != -1)
						$('#layers').find('div:eq('+ layerIndex + ')').addClass("button-selected");
			  		});
		  	  return tempDeferred;
		  	}
		  	
		  	function getLatestJSONURL(index){
		  		if(hurricaneList.length != 0 && hurricaneList[index] != null)
		  			return "http://cera.cct.lsu.edu/cera_data/adcircrun/day=/time=/id=/yr=" + hurricaneList[index].year + "/stormnr=" + hurricaneList[index].value + "/adv=/tracknr=/tz=cdt/asgs=ng/dev=0.json";
		  		else
		  			return "http://cera.cct.lsu.edu/cera_data/adcircrun/day=/time=/id=/yr=/stormnr=/adv=/tracknr=/tz=cdt/asgs=ng/dev=0.json"; //defaults to latest
		  	}
			
			function jumpLayer(layerIndex) {				
				$('#layers div').removeClass("button-selected");
				$('#layers').find('div:eq('+ layerIndex + ')').addClass("button-selected");
				$('#layerName').text(layerList[layerIndex]);
				getMap(layerIndex, null);
			}
	
			function jumpHurricane(hurricaneIndex) {
				$('#hurricaneName').text(hurricaneList[hurricaneIndex].text);
				JSONURL = getLatestJSONURL(hurricaneIndex);
				$('#source').html('<p>Reading from <a href=' + JSONURL + ' style="text-decoration: none;">' + JSONURL + '</a></p>');
				$('#hurricanes div').removeClass("button-selected");
				$('#hurricanes').find('div:eq('+ hurricaneIndex + ')').addClass("button-selected");				
				getMap($('#layers div.button-selected').index(), refresh());				
			}
	
			function returnImageList(map, layerIndex)
			{
				wms_url = wmsGenerator();

				var overlay = new google.maps.ImageMapType(
				{
					getTileUrl: function(tile, zoom) {
						// tile.x,y delivers the Google tile number 
						// *256 = pixel coordinates related to 0,0 (UL) of Google Maps
						// map.getProjection() (Point) returns projected Mercator x,y coordinates -> convert pixel coord to projected coord
						// PixelCoordinate = ProjectedCoordinate(x,y) * 2 exp(zoomLevel) [== Math.pow(2, zoom)]
						// convert projected ccord to LatLng coordinates for MapServer request
						var proj = map.getProjection();
						var zfactor = Math.pow(2, zoom);
						var ul = proj.fromPointToLatLng(new google.maps.Point(tile.x * 256 / zfactor, tile.y * 256 / zfactor) ); 
						var lr = proj.fromPointToLatLng(new google.maps.Point((tile.x + 1) * 256 / zfactor, (tile.y + 1) * 256 / zfactor)); 
						
						var url_data = {
							"REQUEST": "GetMap",
							"SERVICE": "WMS",
							"VERSION": "1.1.1",
							"LAYERS": layerList[layerIndex],
							"STYLES": "default",
							"FORMAT": "image/png",
							"BGCOLOR": "0xFFFFFF",
							"SRS": "EPSG:4326",
							"WIDTH": 256,
							"HEIGHT": 256,
							"BBOX" : ul.lng() + "," + lr.lat() + "," + lr.lng() + "," + ul.lat(),
							"TRANSPARENT": "TRUE",
							"reaspect": "false"
						};

						if(layerList[layerIndex] == null || typeof layerList[layerIndex] === "undefined")
							url_data.LAYERS = "maxelevhist";
							
						url_data.LAYERS += ",griddomain";
							
						var url;
						if(typeof json.nr_cache_hosts === "undefined")
							url = "http://tc" + ((tile.x % 4)+1) + '.' + wms_url + "&" + $.param(url_data);
						else
							url = "http://tc" + ((tile.x % json.nr_cache_hosts)+1) + '.' + wms_url + "&" + $.param(url_data);
							
						return url;
					},
					tileSize: new google.maps.Size(256, 256),
					isPng: true	
				});
				return overlay;
			}
			
			function wmsGenerator()//async solution
			{
				var cfg = get_config_data(); 
				var time = selectIndex(json.times); 
				var com = selectIndex(json.comments_day);
				var storm_year = selectIndex(json.years);
				var day = selectIndex(json.dates); 
				var wms_spec_data = { 
					"day": day, 
					"time": time, 
					"com": com,
					"griddomain": json.grid.name, 
					"tz": cfg.timezone
				};
				var wms_spec = $.param(wms_spec_data);
				wms_url = "cera.cct.lsu.edu/cera_data/ceracgi/cera_wms_tiled?" + wms_spec;
				return wms_url;
			}
	
			function selectIndex(array)
			{
				for(var i = 0; i < array.length; i++)
					if(array[i].selected != null)
						return array[i].value;
				return -1; // really oughtn't happen
			} 	
			
			function get_config_data()
			{
				var config_data = {
					isdefault: "1",
					trackline_check: false,
					hydro_check: false,
					prec_check: false,
					query: false,
					trackquery: false,
					maptype: "ROADMAP",
					sw: [ 21,-97 ],
					ne: [ 37,-74 ],
					zoom: "",
					anilayer: "",
					django_base: "/cera_data",
					data_url: "/cera_data/adcircrun/day=/time=/id=/yr=/stormnr=/adv=/tracknr=/tz=cdt/asgs=ng",
					cgi_base: "/cgi-cera",
					timezone: "cdt",
					asgs: "ng",
					selectmenu: 0,
					mapextent: "gulf",
					mapextent_data: [
						{ value: "gulf", text: "Gulf / Atlantic" },
						{ value: "ng", text: "Northern Gulf" },
						{ value: "al", text: "Alabama" },
						{ value: "la", text: "Louisiana" },
						{ value: "ms", text: "Mississippi" },
						{ value: "orleans", text: "New Orleans" },
						{ value: "custom", text: "- Custom -", default_entry: true }
					],
					maptools: 0,
					googlekey: "AIzaSyADfBA05E4I5N2GCpEQqMvQwOngVbaKuxQ"
				};
				return config_data;
			}	
			
			function initMap()
			{	var firstRefresh = refresh(); // preload JSON so we can use any delay in geolocation			
				navigator.geolocation.getCurrentPosition(
					function(position){ // on success
						makeMap(position.coords.latitude, position.coords.longitude);
						//console.log(position.coords.latitude + ", " + position.coords.longitude);
					}, 
					function(error){	// on error
						makeMap(30.411761, -91.181841);
						//console.log("code: " + error.code + " message: " + error.message);
					}/*, 
					{maximumAge:0, timeout:1000, enableHighAccuracy: true}*/ // for pinpointing
				);
				
				function makeMap(lat, lon) {
					var point = new google.maps.LatLng(lat, lon);
			 		var mapOptions = {zoom: 8, center: point, mapTypeId: google.maps.MapTypeId.ROADMAP, disableDefaultUI: true};
			  		map = new google.maps.Map(document.getElementById('map'),mapOptions);
			  		var marker = new google.maps.Marker
				  			({position: point,map: map,title: "You"});
				  	
				  	//from here on is the custom control
					var layerDropdown = document.getElementById('layers-container');
	    			map.controls[google.maps.ControlPosition.TOP_RIGHT].push(layerDropdown);
	    			
	    			var hurricaneDropdown = document.getElementById('hurricanes-container');
	    			map.controls[google.maps.ControlPosition.TOP_LEFT].push(hurricaneDropdown);
	    			
					getMap(null, firstRefresh);
				}
			}
			
			function getMap(layerIndex, deferred) // making deferred a paramter is messy organization-wise, but it enables first-load optimization
			{
				var layerName = $('#layers').find("div:eq(" + layerIndex + ")").text(); //the name of our last selected layer, is "" during first run
				
				for (var i = 0; i < map.overlayMapTypes.length; i++)
					map.overlayMapTypes.setAt(i, null); // clear map

		  		if(deferred != null) // if NOT a layer change refresh
		  			deferred.done(function(){	
		  				if(layerIndex == null) // if first run
		  				{
		  					layerIndex = 0;
		  					$('#layers div:eq(0)').addClass("button-selected");
		  					$('#hurricanes div:eq(0)').addClass("button-selected");
		  					$('#hurricaneName').text(hurricaneList[0].text);
		  					$('#layerName').text(layerList[0]);
		  				}	  				
		  				
		  				if(layerList[layerIndex] != layerName) // if the old layer name is not in the same place
		  				{
		  					var newIndex = 0; //default to using first layer in layerList
		  					if(layerList.indexOf(layerName) != -1) // if the layer we previously selected still exists in the array somewhere
		  						newIndex = layerList.indexOf(layerName); // select the index of that layer, wherever it is
		  					
		  					$('#layers div').removeClass("button-selected"); // clear old selected layer, if any
							$('#layers').find("div:eq(" + newIndex + ")").addClass("button-selected"); // select new layer
							$('#layers div').toggle(true);
							
							$('#layerName').text(layerList[newIndex]);
							$('#layer-button span').show();
							$('#layerName').hide();
							
							map.overlayMapTypes.push(returnImageList(map, newIndex)/*clear selected layer and default to first layer in array*/);
		  				}
						else // if the layer name is in the same place
						{
							$('#layers').find("div:eq(" + layerIndex + ")").addClass("button-selected");
							map.overlayMapTypes.push(returnImageList(map, layerIndex)/*call a function that returns list of image in an array*/);
						}
						
						$('#hurricane-button span').hide();
    					$('#hurricane-button span:last').show(); // display "Hurricane" on hurricane-button
    				});
    			else // we're probably in a layer change refresh, no refresh of JSON needed
    				map.overlayMapTypes.push(returnImageList(map, layerIndex));
			}
			
		function toggleLayerButton(){
			$('#layers div').slideToggle(100, function(){
				$('#layer-button span').hide();
				if($('#layers div').is(':visible'))
					$('#layer-button span:last').show();
				else
					$('#layerName').show();
			});
			$('layerName').text(layerList[$('#layers div.button-selected').index()]);
		}
		
		function toggleHurricaneButton(){
			$('#hurricanes div').slideToggle(100, function(){
				$('#hurricane-button span').hide();
			if($('#hurricanes div').is(':visible'))
				$('#hurricane-button span:last').show();
			else
				$('#hurricaneName').show();
			});
		}
	</script>
    </head>
    <body onload="initMap()">
    	<div id="container" style="display: block; margin-left: auto; margin-right: auto;">
  			<h5 id="source" style="text-align: center;">&nbsp;</h5>
  			<div class="dropdown-container" id="layers-container">
		      <div class="button-selected" id='layer-button' onclick="toggleLayerButton()">
		      	<span id="layerName" style="display: none">&nbsp;</span>
		      	<span>Layers</span>
		      </div>
		      <div class="dropdown-selected" id="layers">
		        &nbsp;
		      </div>
		    </div>
			<div class="dropdown-container" id="hurricanes-container">
		      <div class="button-selected" id='hurricane-button' onclick="toggleHurricaneButton()">
				<span id="hurricaneName" style="display: none">&nbsp;</span>
		      	<span>Hurricanes</span>
			  </div>
		      <div class="dropdown-selected" id="hurricanes">
		        &nbsp;
		      </div>
		    </div>
	        <div id="map" style="height: 100%px; width: 100%px; margin-left: auto; margin-right: auto; position: relative">&nbsp;</div> 

		    <h2 id="title" style="text-align: center;">CERA Mobile - Just what you need, when you need it</h2>
		    <a href="http://cera.cct.lsu.edu" style="text-align: center; text-decoration: none;"><h3>Looking for the desktop site?</h3></a>
	    </div>	
        <script>
        	doOnOrientationChange();
        	$('#source').html('<p>Reading from <a href=' + JSONURL + ' style="text-decoration: none;">' + JSONURL + '</a></p>');	
        </script>
       </body>    
</html>